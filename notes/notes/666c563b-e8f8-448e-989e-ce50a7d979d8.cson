createdAt: "2020-03-20T04:54:50.076Z"
updatedAt: "2020-03-20T06:10:34.675Z"
type: "MARKDOWN_NOTE"
folder: "b52a7c0642d2c6d5f4b4"
title: "K8s Ingress"
tags: []
content: '''
  # K8s Ingress
  - allow connections from outside of the cluster to visit services within the cluster
  - an alternative for external LoadBalancer and NodePort service
  
  ### Ingress resource/Ingress controller
  - ingress + ClusterIP
  ![QQ图片20200320135033.png](:storage\\666c563b-e8f8-448e-989e-ce50a7d979d8\\cededf87.png =800x500)
  
  - create deployment/service
  ```yaml
  apiVersion:  apps/v1
  kind: Deployment
  metadata:
    name: deploy-helloworld-1
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: helloworld-1
    template:
      metadata:
        labels:
          app: helloworld-1
      spec:
        containers:
        - name: simple-http
          image: python:2.7
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash"]
          args: ["-c", "echo \\"<p>Hello 1 from $(hostname)</p>\\" > index.html; python -m SimpleHTTPServer 8080"]
          ports:
          - name: http
            containerPort: 8080
  ---
  apiVersion: v1
  kind: Service
  metadata:
    name: service-helloworld-1
  spec:
    type: NodePort
    ports:
    - port: 80
      nodePort: 30303
      targetPort: 8080
      protocol: TCP
      name: http
    selector:
      app: helloworld-1
  ```
  - create ingress to this service
  ```yaml
  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    name: helloworld-rules
  spec:
    rules:
    - host: helloworld-v1.example.com
      http:
        paths:
        - path: /
          backend:
            serviceName: service-helloworld-1
            servicePort: 80
    - host: helloworld-v2.example.com
      http:
        paths:
        - path: /
          backend:
            serviceName: service-helloworld-2
            servicePort: 80
  ```
  > then we can access helloworld-v1.example.com to service
'''
linesHighlighted: []
isStarred: false
isTrashed: false

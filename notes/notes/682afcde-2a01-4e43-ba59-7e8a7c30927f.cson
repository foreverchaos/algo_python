createdAt: "2019-08-05T08:46:45.242Z"
updatedAt: "2019-08-05T08:48:58.092Z"
type: "SNIPPET_NOTE"
folder: "a8a34bf81446463f9ca3"
title: "decorator"
tags: []
description: "decorator"
snippets: [
  {
    linesHighlighted: []
    name: "sample"
    mode: "Python"
    content: '''
      def use_logging(func):
      
          def wrapper():
              logging.warn("%s is running" % func.__name__)
              return func()
          return wrapper
      
      @use_logging
      def foo():
          print("i am foo")
      
      foo()
      
      
      
      from functools import wraps
      def logged(func):
          @wraps(func)
          def with_logging(*args, **kwargs):
              print func.__name__      # 输出 'f'
              print func.__doc__       # 输出 'does some math'
              return func(*args, **kwargs)
          return with_logging
      
      @logged
      def f(x):
         """does some math"""
         return x + x * x
    '''
  }
  {
    name: "with args"
    mode: "Python"
    content: '''
      def use_logging(level):
          def decorator(func):
              def wrapper(*args, **kwargs):
                  if level == "warn":
                      logging.warn("%s is running" % func.__name__)
                  elif level == "info":
                      logging.info("%s is running" % func.__name__)
                  return func(*args)
              return wrapper
      
          return decorator
      
      @use_logging(level="warn")
      def foo(name='foo'):
          print("i am %s" % name)
      
      foo()
    '''
    linesHighlighted: []
  }
  {
    name: "class dec"
    mode: "Python"
    content: '''
      class Foo(object):
          def __init__(self, func):
              self._func = func
      
          def __call__(self):
              print ('class decorator runing')
              self._func()
              print ('class decorator ending')
      
      @Foo
      def bar():
          print ('bar')
      
      bar()
    '''
    linesHighlighted: []
  }
]
isStarred: false
isTrashed: false
